import gaimport timeimport mlpimport getDataimport numpy as np#parameters for the ga function: (stringLength,fitnessFunction,nEpochs,populationSize=100,mutationProb=-1,crossover='un',nElite=4,tournament=True)# g = ga.ga(100,'fF.fourpeaks',1000,100,0.01,'sp',4,False)# g.runGA()# ##nEpochs = number generations.def removecolumns(data,chromosome):    i = 0    reducedData_in = np.array([])    for value in chromosome:  #for each value in the chromosome that is 1, the column of training data set is included in a new array        if value == 1:            if((np.shape(reducedData_in)[0]) == 0):                reducedData_in = data[:,i]            else:                reducedData_in = np.column_stack((reducedData_in,data[:,i]))                        i+=1    # print("removed colmn data", np.shape(reducedData_in))        return reducedData_in def createBestTestSet(chrome):    testData,trainingData,validation = getData.runGetData()    train_in = trainingData[:,:-1]    train_tgt = trainingData[:,57:58]    testing_in = testData[:,:-1]    testing_tgt = testData[:,-1]    validation_in = validation[:,:58]    validation_tgt = validation[:,57:58]        testing_in = removecolumns(testing_in,chrome)    print("Testing data",testing_in)        g = ga.ga(57,'cF.chromosomeFitness',5,5,0.8,'un',4,False)print("running GA")# timeStart = time.time()# print(timeStart)chrome = g.runGA()print("Chromosome Returned from genetic algorithm",chrome)createBestTestSet(chrome)