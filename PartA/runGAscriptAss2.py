import gaimport timeimport mlpimport getDataimport numpy as np#parameters for the ga function: (stringLength,fitnessFunction,nEpochs,populationSize=100,mutationProb=-1,crossover='un',nElite=4,tournament=True)# g = ga.ga(100,'fF.fourpeaks',1000,100,0.01,'sp',4,False)# g.runGA()# ##nEpochs = number generations.def removecolumns(data,chromosome):    i = 0    reducedData_in = np.array([])    for value in chromosome:  #for each value in the chromosome that is 1, the column of training data set is included in a new array        if value == 1:            if((np.shape(reducedData_in)[0]) == 0):                reducedData_in = data[:,i]            else:                reducedData_in = np.column_stack((reducedData_in,data[:,i]))                        i+=1    # print("removed colmn data", np.shape(reducedData_in))        return reducedData_in # def createBestTestSet(chrome,testing_in,testing_tgt):#     testing_in = removecolumns(testing_in,chrome)#     percentageAccuracy = net.confmat(testing_in,testing_tgt)#     print("Testing data",testing_in)#
#--------------------------------------------------------------------main----------------------------------------testData,trainingData,validation = getData.runGetData()train_in = trainingData[:,:-1]train_tgt = trainingData[:,57:58]testing_in = testData[:,:-1]testing_tgt = testData[:,57:58]validation_in = validation[:,:-1]validation_tgt = validation[:,57:58]# g = ga.ga(57,'cF.chromosomeFitness',5,5,0.8,'un',4,False)g = ga.ga(train_in,train_tgt,validation_in,validation_tgt,57,'cF.chromosomeFitness',5,5,0.8,'un',4,False)print("running GA")# timeStart = time.time()# print(timeStart)chrome = g.runGA()print("Chromosome Returned from genetic algorithm",chrome)testing_in = removecolumns(testing_in,chrome)train_in  = removecolumns(train_in,chrome)validation_in = removecolumns(validation_in,chrome)net = mlp.mlp(train_in,train_tgt,10,outtype = 'linear')#different types of out puts: linear, logistic,softmaxerror = net.mlptrain(train_in,train_tgt,0.1,100)errorEarlyStoppingError = net.earlystopping(train_in,train_tgt,validation_in,validation_tgt,0.25,2)percentageAccuracy = net.confmat(testing_in,testing_tgt)